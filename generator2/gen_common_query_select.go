package generator2

func (g *Generator) genCommonQuerySelect() {
	// 构造器定义
	g.Pn("type SelectBuilderBase struct {")
	g.Pn("    query *QueryBase")
	g.Pn("    groupByFields []string")
	g.Pn("    groupByOrders []bool")
	g.Pn("    orderByFields []string")
	g.Pn("    orderByOrders []bool")
	g.Pn("    hasLimit bool")
	g.Pn("    limitStartIncluded int64")
	g.Pn("    limitCount int64")
	g.Pn("    forUpdate bool")
	g.Pn("    forShare bool")
	g.Pn("}")
	g.Pn("")

	// 构造查询语句及参数
	g.Pn("func (b *SelectBuilderBase)buildQuery() (queryString string,params []interface{}) {")
	g.Pn("    query:=bytes.NewBufferString(\"\")")
	g.Pn("")
	g.Pn("    where:=b.query.where.String()")
	g.Pn("    if where!=\"\"{")
	g.Pn("        query.WriteString(\" WHERE \")")
	g.Pn("        query.WriteString(where)")
	g.Pn("        params=append(params,b.query.whereParams)")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    groupByCount:=len(b.groupByFields)")
	g.Pn("    if groupByCount>0{")
	g.Pn("        groupByItems:=make([]string,groupByCount)")
	g.Pn("        for i,v:=range b.groupByFields{")
	g.Pn("            if b.groupByOrders[i]{")
	g.Pn("                groupByItems[i]=v+\" ASC\"")
	g.Pn("            }else{")
	g.Pn("                groupByItems[i]=v+\" DESC\"")
	g.Pn("            }")
	g.Pn("        }")
	g.Pn("        query.WriteString(\" GROUP BY \")")
	g.Pn("        query.WriteString(strings.Join(groupByItems,\",\"))")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    orderByCount:=len(b.orderByFields)")
	g.Pn("    if orderByCount>0{")
	g.Pn("        orderByItems:=make([]string,orderByCount)")
	g.Pn("        for i,v:=range b.orderByFields{")
	g.Pn("            if b.orderByOrders[i]{")
	g.Pn("                orderByItems[i]=v+\" ASC\"")
	g.Pn("            }else{")
	g.Pn("                orderByItems[i]=v+\" DESC\"")
	g.Pn("            }")
	g.Pn("        }")
	g.Pn("        query.WriteString(\" ORDER BY \")")
	g.Pn("        query.WriteString(strings.Join(orderByItems,\",\"))")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    if b.hasLimit{")
	g.Pn("        query.WriteString(fmt.Sprintf(\" LIMIT %%d,%%d\",b.limitStartIncluded,b.limitCount))")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    if b.forUpdate{")
	g.Pn("        query.WriteString(\" FOR UPDATE\")")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    if b.forShare{")
	g.Pn("        query.WriteString(\" LOCK IN SHARE MODE\")")
	g.Pn("    }")
	g.Pn("")
	g.Pn("    return query.String(),params")
	g.Pn("}")
	g.Pn("")
}
